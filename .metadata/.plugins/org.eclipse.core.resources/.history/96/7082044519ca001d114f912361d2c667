package com.ezen.view;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;
import com.ezen.biz.dto.AdminVO;
import com.ezen.biz.dto.MemberVO;
import com.ezen.biz.dto.OrderVO;
import com.ezen.biz.dto.ProductVO;
import com.ezen.biz.dto.QnaVO;
import com.ezen.biz.service.AdminService;
import com.ezen.biz.service.MemberService;
import com.ezen.biz.service.OrderService;
import com.ezen.biz.service.ProductService;
import com.ezen.biz.service.QnaService;

import utils.Criteria;
import utils.PageMaker;

@Controller
@SessionAttributes("admin")
public class AdminController {

	@Autowired
	private AdminService adminService;
	@Autowired
	private ProductService productService;
	@Autowired
	private OrderService orderService;
	@Autowired
	private MemberService memberService;
	@Autowired
	private QnaService qnaService;

	@GetMapping("/admin_login_form")
	public String adminLoginView() {

		return "admin/main";
	}

	@PostMapping("/admin_login")
	public String adminLogin(AdminVO vo, Model model) {
		int result = adminService.adminCheck(vo);

		if (result == 1) {
			model.addAttribute("admin", adminService.getAdmin(vo.getId()));

			return "redirect:admin_product_list";
		} else {

			if (result == 0) {
				model.addAttribute("message", "비밀번호를 확인해 주세요");
			} else {
				model.addAttribute("message", "아이디를 확인해 주세요");
			}

			return "admin/main";
		}
	}
	// 페이징 처리 전 소스

	/*
	 * @GetMapping("/admin_product_list") public String
	 * adminProductList(@RequestParam(value = "key", defaultValue = "") String name,
	 * Model model) { List<ProductVO> productList =
	 * productService.getListProduct(name); model.addAttribute("productList",
	 * productList); model.addAttribute("productListSize", productList.size());
	 * return "admin/product/productList"; }
	 */

	// 페이징 처리
	@RequestMapping("/admin_product_list")
	public String adminProductList(@RequestParam(value = "key", defaultValue = "") String name,
			@RequestParam(value = "rowsPerPage", defaultValue = "10") String rowsPerPage,
			@RequestParam(value = "pageNum", defaultValue = "1") String pageNum, Model model) {

		// 화면에 표시할 페이지 버튼 정보 설정(PageMaker 클래스 이용)

		PageMaker pageMaker = new PageMaker();
		Criteria criteria = new Criteria();
		criteria.setPageNum(Integer.parseInt(pageNum));
		criteria.setRowsPerPage(Integer.parseInt(rowsPerPage));

		List<ProductVO> productList = productService.getListProductWithPaging(name, criteria);
		pageMaker.setCriteria(criteria); // 현재 페이지 정보 저장
		pageMaker.setTotalCount(productService.countProductList(name)); // 전체 게시글의 수 저장

		model.addAttribute("productList", productList);
		model.addAttribute("productListSize", productList.size());
		model.addAttribute("pageMaker", pageMaker);

		return "admin/product/productList";
	}

	@PostMapping("/admin_product_write_form")
	public String adminProductWriteView(Model model) {

		String[] kindList = { "힐", "부츠", "샌달", "슬리퍼", "스니커즈", "세일" };
		model.addAttribute("kindList", kindList);
		return "admin/product/productWrite";
	}

	@PostMapping("/admin_product_write")
	public String adminProductWrite(ProductVO vo, HttpSession session,
			@RequestParam(value = "product_image") MultipartFile uploadFile) {
		if (!uploadFile.isEmpty()) {
			String fileNmae = uploadFile.getOriginalFilename();
			vo.setImage(fileNmae);

			// 전송된 이미지 파일을 이동할 실제 경로 구하기
			String image_path = session.getServletContext().getRealPath("WEB-INF/resources/product_images/");

			try {
				uploadFile.transferTo(new File(image_path + fileNmae));
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
		}

		productService.insertProduct(vo);
		return "redirect:admin_product_list";
	}

	@RequestMapping("/admin_product_detail")
	public String adminProductDetailAction(ProductVO vo, Model model) {
		String[] kindList = { "", "힐", "부츠", "샌달", "슬리퍼", "스니커즈", "세일" };

		ProductVO product = productService.getProduct(vo);

		model.addAttribute("productVO", product);
		int index = Integer.parseInt(product.getKind());
		model.addAttribute("kind", kindList[index]);

		return "admin/product/productDetail";

	}

	@RequestMapping("/admin_product_update_form")
	public String adminProductUpdateView(ProductVO vo, Model model) {
		ProductVO product = productService.getProduct(vo);
		String[] kindList = { "", "힐", "부츠", "샌달", "슬리퍼", "스니커즈", "세일" };

		model.addAttribute("productVO", product);
		model.addAttribute("kindList", kindList);

		return "admin/product/productUpdate";
	}

	@PostMapping("/admin_product_update")
	public String adminProductUpdate(ProductVO vo, @RequestParam(value = "product_image") MultipartFile uploadFile,
			@RequestParam(value = "nonmakeImg") String org_img, HttpSession session) {

		if (!uploadFile.isEmpty()) { // 상품 이미지를 수정한 경우임
			String fileNmae = uploadFile.getOriginalFilename();
			vo.setImage(fileNmae);

			// 전송된 이미지 파일을 이동할 실제 경로 구하기
			String image_path = session.getServletContext().getRealPath("WEB-INF/resources/product_images/");

			try {
				uploadFile.transferTo(new File(image_path + fileNmae));
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
		} else { // 상품의 기존 이미지를 사용하는 경우
			vo.setImage(org_img);
		}
		// 베스트 상품, 신규 상품 처리
		if (vo.getUseyn() == null) {
			vo.setUseyn("n");
		} else {
			vo.setUseyn("y");
		}
		if (vo.getBestyn() == null) {
			vo.setBestyn("n");
		} else {
			vo.setBestyn("y");
		}

		productService.updateProduct(vo);
		return "redirect:admin_product_list";
	}

	@RequestMapping("/admin_order_list")
	public String adminOrderList(@RequestParam(value = "key", defaultValue = "") String mname,Model model) {
		List<OrderVO> adminOrderList = orderService.getListOrder(mname);
		
		model.addAttribute("orderList", adminOrderList);
		return "admin/order/orderList";
	}

	/*
	 * 주문완료 처리(입금 확인)
	 */
	@RequestMapping("/admin_order_save")
	public String adminOrderSave(@RequestParam(value = "result") int[] odseq) {
		for(int i = 0; i < odseq.length; i++) {
			orderService.updateOrderResult(odseq[i]);
		}
		
		return "redirect:admin_order_list";
	}
	
	@RequestMapping("/admin_member_list")
	public String adminMemberList(Model model,
			@RequestParam(value = "key",defaultValue = "") String name) {
		
		model.addAttribute("memberList", memberService.getListMember(name));
		
		return "admin/member/memberList";
	}
	
	@RequestMapping("/admin_qna_list")
	public String adminQnaList(Model model) {
		model.addAttribute("qnaList", qnaService.getListAllQna());
		
		return "admin/qna/qnaList";
	}
	
	@PostMapping("/admin_qna_detail")
	public String adminQnaDetail(QnaVO vo,Model model) {
		
		model.addAttribute("qnaVO", qnaService.getQna(vo.getQseq()));
		return "admin/qna/qnaDetail";
	}
	
	@PostMapping("/admin_qna_repsave")
	public String adminQnaResave(QnaVO vo,Model model) {
		qnaService.updateQna(vo);
		
		return "redirect:admin_qna_list";
	}
}
